#include <iostream>
#include <string>
#include <vector>
#include <limits> // Para limitar la entrada de cin

using namespace std;

// Función que elimina tildes del texto
string eliminarTildes(string texto) {
    for (size_t i = 0; i < texto.length(); i++) {
        if (texto[i] == 'á' || texto[i] == 'Á') texto[i] = 'a';
        else if (texto[i] == 'é' || texto[i] == 'É') texto[i] = 'e';
        else if (texto[i] == 'í' || texto[i] == 'Í') texto[i] = 'i';
        else if (texto[i] == 'ó' || texto[i] == 'Ó') texto[i] = 'o';
        else if (texto[i] == 'ú' || texto[i] == 'Ú') texto[i] = 'u';
    }
    return texto;
}

// --- Clase Respuesta ---
class Respuesta {
private:
    string texto;

public:
    Respuesta(string texto) : texto(eliminarTildes(move(texto))) {}
    string getTexto() const { return texto; }
};

// --- Clase ItemPregunta ---
class ItemPregunta {
private:
    string enunciado;
    vector<Respuesta> respuestas;

public:
    ItemPregunta(string enunciado) : enunciado(eliminarTildes(move(enunciado))) {}
    void agregarRespuesta(const string &texto) { respuestas.emplace_back(eliminarTildes(texto)); }
    void mostrar() const {
        cout << "Pregunta: " << enunciado << endl;
        for (size_t i = 0; i < respuestas.size(); ++i) {
            cout << "  - Respuesta " << i + 1 << ": " << respuestas[i].getTexto() << endl;
        }
    }
    string getEnunciado() const { return enunciado; }
    const vector<Respuesta> &getRespuestas() const { return respuestas; }
    void setEnunciado(const string &nuevoEnunciado) { enunciado = eliminarTildes(nuevoEnunciado); }
};

// --- Clase Item ---
class Item {
private:
    string tipo;
    string taxonomia;
    vector<ItemPregunta> preguntas;

public:
    Item(string tipo, string taxonomia) : tipo(eliminarTildes(move(tipo))), taxonomia(eliminarTildes(move(taxonomia))) {}

    void agregarPregunta(const ItemPregunta &pregunta) { preguntas.push_back(pregunta); }
    void eliminarPregunta(int indice) {
        if (indice >= 0 && indice < (int)preguntas.size()) {
            preguntas.erase(preguntas.begin() + indice);
            cout << "Pregunta eliminada exitosamente.\n";
        }
    }
    void mostrar(int numeroItem) const {
        cout << "Item #" << numeroItem << " (" << tipo << ", " << taxonomia << "):\n";
        for (size_t i = 0; i < preguntas.size(); ++i) {
            cout << "  " << i + 1 << ") ";
            preguntas[i].mostrar();
        }
    }
    string getTaxonomia() const { return taxonomia; }
    string getTipo() const { return tipo; }
    const vector<ItemPregunta> &getPreguntas() const { return preguntas; }
};

// --- Clase Profesor ---
class Profesor {
private:
    string nombre;

public:
    Profesor(string nombre) : nombre(eliminarTildes(move(nombre))) {}
    string getNombre() const { return nombre; }
};

// --- Clase Materia ---
class Materia {
private:
    string nombre;
    float ponderacion;

public:
    Materia(string nombre, float ponderacion) : nombre(eliminarTildes(move(nombre))), ponderacion(ponderacion) {}
    string getNombre() const { return nombre; }
    float getPonderacion() const { return ponderacion; }
    void setPonderacion(float nuevaPonderacion) { ponderacion = nuevaPonderacion; }
};

// --- Clase Prueba ---
class Prueba {
private:
    string titulo;
    string fechaCreacion;
    Profesor profesor;
    Materia materia;
    vector<Item> items;

    string obtenerFechaActual() { return "2023-10-25"; } // Simulación de fecha actual

public:
    Prueba(string titulo, const Profesor &profesor, const Materia &materia)
        : titulo(eliminarTildes(move(titulo))), profesor(profesor), materia(materia), fechaCreacion(obtenerFechaActual()) {}

    void agregarItem(const Item &item) { items.push_back(item); }

    // Métodos constantes y no constantes para acceder a los ítems
    const vector<Item> &getItems() const { return items; }
    vector<Item> &getEditableItems() { return items; }

    const string &getTitulo() const { return titulo; }

    void mostrarPrueba() const {
        cout << "Prueba: " << titulo << endl;
        cout << "Fecha: " << fechaCreacion << endl;
        cout << "Profesor(a): " << profesor.getNombre() << endl;
        cout << "Materia: " << materia.getNombre() << endl;
        cout << "Ponderacion: " << materia.getPonderacion() << endl;

        for (size_t i = 0; i < items.size(); ++i) {
            cout << "\nItem #" << i + 1 << ":" << endl;
            if (items[i].getTipo() == "Verdadero/Falso") {
                const auto &preguntas = items[i].getPreguntas();
                for (const auto &pregunta : preguntas) {
                    cout << "  - " << pregunta.getEnunciado() << endl;
                }
            } else {
                items[i].mostrar(i + 1);
            }
        }
    }
};

// --- Clase Menu ---
class Menu {
private:
    vector<Prueba> pruebas;
    vector<Materia> materias;

    void inicializarMaterias() {
        materias.emplace_back("Lenguaje", 20.0f);
        materias.emplace_back("Ingles", 15.0f);
        materias.emplace_back("Matematicas", 25.0f);
        materias.emplace_back("Historia", 10.0f);
        materias.emplace_back("Ciencias", 30.0f);
    }

    int obtenerEntradaValida(int min, int max) {
        int opcion;
        while (true) {
            cin >> opcion;
            if (cin.fail() || opcion < min || opcion > max) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "Ingrese un numero valido: ";
            } else {
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                return opcion;
            }
        }
    }

    void pausaMenu() const {
        cout << "\nPresione ENTER para regresar al menu principal...";
        cin.get();
    }

    void crearPrueba() {
        string tituloPrueba, nombreProfesor;
        cout << "\n===== Crear Prueba =====\n";
        cout << "Ingrese el titulo de la prueba: ";
        getline(cin, tituloPrueba);

        cout << "Profesor(a): ";
        getline(cin, nombreProfesor);
        Profesor profesor(nombreProfesor);

        cout << "Seleccione la materia:\n";
        for (size_t i = 0; i < materias.size(); ++i) {
            cout << i + 1 << ") " << materias[i].getNombre() << " - Ponderacion: " << materias[i].getPonderacion() << endl;
        }
        int opcionMateria = obtenerEntradaValida(1, materias.size());
        Materia materiaSeleccionada = materias[opcionMateria - 1];

        Prueba nuevaPrueba(tituloPrueba, profesor, materiaSeleccionada);

        while (true) {
            cout << "\n=== Nuevo Item ===\n";
            cout << "Seleccione que Tipo de Pregunta desea en el Item.\n";
            cout << "1) Verdadero/Falso\n";
            cout << "2) Opcion Multiple\n------------\n";
            cout << "3) Salir\n";

            int tipoItem = obtenerEntradaValida(1, 3);

            if (tipoItem == 3) {
                pruebas.push_back(nuevaPrueba);
                cout << "Saliendo de la creación de la prueba...\n";
                return;
            }

            string tipo = (tipoItem == 1) ? "Verdadero/Falso" : "Opcion Multiple";

            cout << "Ingrese la Taxonomia del item.\n";
            cout << "1) Crear\n2) Evaluar\n3) Analizar\n4) Aplicar\n5) Entender\n6) Recordar\n------------\n";
            int taxonomiaItem = obtenerEntradaValida(1, 6);
            string taxonomia;
            switch (taxonomiaItem) {
                case 1: taxonomia = "crear"; break;
                case 2: taxonomia = "evaluar"; break;
                case 3: taxonomia = "analizar"; break;
                case 4: taxonomia = "aplicar"; break;
                case 5: taxonomia = "entender"; break;
                case 6: taxonomia = "recordar"; break;
            }

            Item nuevoItem(tipo, taxonomia);

            cout << "Ingrese la cantidad de preguntas que desea agregar al item: ";
            int numPreguntas = obtenerEntradaValida(1, 50);

            for (int j = 0; j < numPreguntas; ++j) {
                cout << "Ingrese la pregunta #" << j + 1 << ": ";
                string enunciadoPregunta;
                getline(cin, enunciadoPregunta);

                ItemPregunta nuevaPregunta(enunciadoPregunta);

                if (tipo == "Opcion Multiple") {
                    cout << "Cuantas Respuestas quiere ingresar?: ";
                    int numRespuestas = obtenerEntradaValida(1, 4);

                    for (int r = 0; r < numRespuestas; ++r) {
                        cout << "Respuesta #" << r + 1 << ": ";
                        string respuestaTexto;
                        getline(cin, respuestaTexto);
                        nuevaPregunta.agregarRespuesta(respuestaTexto);
                    }
                } else {
                    nuevaPregunta.agregarRespuesta("Verdadero");
                    nuevaPregunta.agregarRespuesta("Falso");
                }

                nuevoItem.agregarPregunta(nuevaPregunta);
            }

            nuevaPrueba.agregarItem(nuevoItem);
        }
    }

    void mostrarPruebas() const {
        if (pruebas.empty()) {
            cout << "No se han creado pruebas aun.\n";
        } else {
            for (size_t i = 0; i < pruebas.size(); ++i) {
                cout << "\nPrueba #" << i + 1 << ":\n";
                pruebas[i].mostrarPrueba();
            }
        }
        pausaMenu();
    }

public:
    Menu() { inicializarMaterias(); }

    void mostrarMenu() const {
        cout << "\n===== Menu Principal =====\n";
        cout << "1. Crear Evaluacion.\n";
        cout << "2. Mostrar Pruebas.\n";
        cout << "3. Salir\n";
        cout << "Seleccione una opcion: ";
    }

    void lanzar() {
        int opcion;
        do {
            mostrarMenu();
            opcion = obtenerEntradaValida(1, 3);
            switch (opcion) {
                case 1: crearPrueba(); break;
                case 2: mostrarPruebas(); break;
                case 3: cout << "Saliendo... Adios!\n"; break;
            }
        } while (opcion != 3);
    }
};

// --- Función principal ---
int main() {
    Menu menu;
    menu.lanzar();
    return 0;
}#include <iostream>
 #include <string>
 #include <vector>
 #include <limits> // Para limitar la entrada de cin

 using namespace std;

 // Función que elimina tildes del texto
 string eliminarTildes(string texto) {
     for (size_t i = 0; i < texto.length(); i++) {
         if (texto[i] == 'á' || texto[i] == 'Á') texto[i] = 'a';
         else if (texto[i] == 'é' || texto[i] == 'É') texto[i] = 'e';
         else if (texto[i] == 'í' || texto[i] == 'Í') texto[i] = 'i';
         else if (texto[i] == 'ó' || texto[i] == 'Ó') texto[i] = 'o';
         else if (texto[i] == 'ú' || texto[i] == 'Ú') texto[i] = 'u';
     }
     return texto;
 }

 // --- Clase Respuesta ---
 class Respuesta {
 private:
     string texto;

 public:
     Respuesta(string texto) : texto(eliminarTildes(move(texto))) {}
     string getTexto() const { return texto; }
 };

 // --- Clase ItemPregunta ---
 class ItemPregunta {
 private:
     string enunciado;
     vector<Respuesta> respuestas;

 public:
     ItemPregunta(string enunciado) : enunciado(eliminarTildes(move(enunciado))) {}
     void agregarRespuesta(const string &texto) { respuestas.emplace_back(eliminarTildes(texto)); }
     void mostrar() const {
         cout << "Pregunta: " << enunciado << endl;
         for (size_t i = 0; i < respuestas.size(); ++i) {
             cout << "  - Respuesta " << i + 1 << ": " << respuestas[i].getTexto() << endl;
         }
     }
     string getEnunciado() const { return enunciado; }
     const vector<Respuesta> &getRespuestas() const { return respuestas; }
     void setEnunciado(const string &nuevoEnunciado) { enunciado = eliminarTildes(nuevoEnunciado); }
 };

 // --- Clase Item ---
 class Item {
 private:
     string tipo;
     string taxonomia;
     vector<ItemPregunta> preguntas;

 public:
     Item(string tipo, string taxonomia) : tipo(eliminarTildes(move(tipo))), taxonomia(eliminarTildes(move(taxonomia))) {}

     void agregarPregunta(const ItemPregunta &pregunta) { preguntas.push_back(pregunta); }
     void eliminarPregunta(int indice) {
         if (indice >= 0 && indice < (int)preguntas.size()) {
             preguntas.erase(preguntas.begin() + indice);
             cout << "Pregunta eliminada exitosamente.\n";
         }
     }
     void mostrar(int numeroItem) const {
         cout << "Item #" << numeroItem << " (" << tipo << ", " << taxonomia << "):\n";
         for (size_t i = 0; i < preguntas.size(); ++i) {
             cout << "  " << i + 1 << ") ";
             preguntas[i].mostrar();
         }
     }
     string getTaxonomia() const { return taxonomia; }
     string getTipo() const { return tipo; }
     const vector<ItemPregunta> &getPreguntas() const { return preguntas; }
 };

 // --- Clase Profesor ---
 class Profesor {
 private:
     string nombre;

 public:
     Profesor(string nombre) : nombre(eliminarTildes(move(nombre))) {}
     string getNombre() const { return nombre; }
 };

 // --- Clase Materia ---
 class Materia {
 private:
     string nombre;
     float ponderacion;

 public:
     Materia(string nombre, float ponderacion) : nombre(eliminarTildes(move(nombre))), ponderacion(ponderacion) {}
     string getNombre() const { return nombre; }
     float getPonderacion() const { return ponderacion; }
     void setPonderacion(float nuevaPonderacion) { ponderacion = nuevaPonderacion; }
 };

 // --- Clase Prueba ---
 class Prueba {
 private:
     string titulo;
     string fechaCreacion;
     Profesor profesor;
     Materia materia;
     vector<Item> items;

     string obtenerFechaActual() { return "2023-10-25"; } // Simulación de fecha actual

 public:
     Prueba(string titulo, const Profesor &profesor, const Materia &materia)
         : titulo(eliminarTildes(move(titulo))), profesor(profesor), materia(materia), fechaCreacion(obtenerFechaActual()) {}

     void agregarItem(const Item &item) { items.push_back(item); }

     // Métodos constantes y no constantes para acceder a los ítems
     const vector<Item> &getItems() const { return items; }
     vector<Item> &getEditableItems() { return items; }

     const string &getTitulo() const { return titulo; }

     void mostrarPrueba() const {
         cout << "Prueba: " << titulo << endl;
         cout << "Fecha: " << fechaCreacion << endl;
         cout << "Profesor(a): " << profesor.getNombre() << endl;
         cout << "Materia: " << materia.getNombre() << endl;
         cout << "Ponderacion: " << materia.getPonderacion() << endl;

         for (size_t i = 0; i < items.size(); ++i) {
             cout << "\nItem #" << i + 1 << ":" << endl;
             if (items[i].getTipo() == "Verdadero/Falso") {
                 const auto &preguntas = items[i].getPreguntas();
                 for (const auto &pregunta : preguntas) {
                     cout << "  - " << pregunta.getEnunciado() << endl;
                 }
             } else {
                 items[i].mostrar(i + 1);
             }
         }
     }
 };

 // --- Clase Menu ---
 class Menu {
 private:
     vector<Prueba> pruebas;
     vector<Materia> materias;

     void inicializarMaterias() {
         materias.emplace_back("Lenguaje", 20.0f);
         materias.emplace_back("Ingles", 15.0f);
         materias.emplace_back("Matematicas", 25.0f);
         materias.emplace_back("Historia", 10.0f);
         materias.emplace_back("Ciencias", 30.0f);
     }

     int obtenerEntradaValida(int min, int max) {
         int opcion;
         while (true) {
             cin >> opcion;
             if (cin.fail() || opcion < min || opcion > max) {
                 cin.clear();
                 cin.ignore(numeric_limits<streamsize>::max(), '\n');
                 cout << "Ingrese un numero valido: ";
             } else {
                 cin.ignore(numeric_limits<streamsize>::max(), '\n');
                 return opcion;
             }
         }
     }

     void pausaMenu() const {
         cout << "\nPresione ENTER para regresar al menu principal...";
         cin.get();
     }

     void crearPrueba() {
         string tituloPrueba, nombreProfesor;
         cout << "\n===== Crear Prueba =====\n";
         cout << "Ingrese el titulo de la prueba: ";
         getline(cin, tituloPrueba);

         cout << "Profesor(a): ";
         getline(cin, nombreProfesor);
         Profesor profesor(nombreProfesor);

         cout << "Seleccione la materia:\n";
         for (size_t i = 0; i < materias.size(); ++i) {
             cout << i + 1 << ") " << materias[i].getNombre() << " - Ponderacion: " << materias[i].getPonderacion() << endl;
         }
         int opcionMateria = obtenerEntradaValida(1, materias.size());
         Materia materiaSeleccionada = materias[opcionMateria - 1];

         Prueba nuevaPrueba(tituloPrueba, profesor, materiaSeleccionada);

         while (true) {
             cout << "\n=== Nuevo Item ===\n";
             cout << "Seleccione que Tipo de Pregunta desea en el Item.\n";
             cout << "1) Verdadero/Falso\n";
             cout << "2) Opcion Multiple\n------------\n";
             cout << "3) Salir\n";

             int tipoItem = obtenerEntradaValida(1, 3);

             if (tipoItem == 3) {
                 pruebas.push_back(nuevaPrueba);
                 cout << "Saliendo de la creación de la prueba...\n";
                 return;
             }

             string tipo = (tipoItem == 1) ? "Verdadero/Falso" : "Opcion Multiple";

             cout << "Ingrese la Taxonomia del item.\n";
             cout << "1) Crear\n2) Evaluar\n3) Analizar\n4) Aplicar\n5) Entender\n6) Recordar\n------------\n";
             int taxonomiaItem = obtenerEntradaValida(1, 6);
             string taxonomia;
             switch (taxonomiaItem) {
                 case 1: taxonomia = "crear"; break;
                 case 2: taxonomia = "evaluar"; break;
                 case 3: taxonomia = "analizar"; break;
                 case 4: taxonomia = "aplicar"; break;
                 case 5: taxonomia = "entender"; break;
                 case 6: taxonomia = "recordar"; break;
             }

             Item nuevoItem(tipo, taxonomia);

             cout << "Ingrese la cantidad de preguntas que desea agregar al item: ";
             int numPreguntas = obtenerEntradaValida(1, 50);

             for (int j = 0; j < numPreguntas; ++j) {
                 cout << "Ingrese la pregunta #" << j + 1 << ": ";
                 string enunciadoPregunta;
                 getline(cin, enunciadoPregunta);

                 ItemPregunta nuevaPregunta(enunciadoPregunta);

                 if (tipo == "Opcion Multiple") {
                     cout << "Cuantas Respuestas quiere ingresar?: ";
                     int numRespuestas = obtenerEntradaValida(1, 4);

                     for (int r = 0; r < numRespuestas; ++r) {
                         cout << "Respuesta #" << r + 1 << ": ";
                         string respuestaTexto;
                         getline(cin, respuestaTexto);
                         nuevaPregunta.agregarRespuesta(respuestaTexto);
                     }
                 } else {
                     nuevaPregunta.agregarRespuesta("Verdadero");
                     nuevaPregunta.agregarRespuesta("Falso");
                 }

                 nuevoItem.agregarPregunta(nuevaPregunta);
             }

             nuevaPrueba.agregarItem(nuevoItem);
         }
     }

     void mostrarPruebas() const {
         if (pruebas.empty()) {
             cout << "No se han creado pruebas aun.\n";
         } else {
             for (size_t i = 0; i < pruebas.size(); ++i) {
                 cout << "\nPrueba #" << i + 1 << ":\n";
                 pruebas[i].mostrarPrueba();
             }
         }
         pausaMenu();
     }

 public:
     Menu() { inicializarMaterias(); }

     void mostrarMenu() const {
         cout << "\n===== Menu Principal =====\n";
         cout << "1. Crear Evaluacion.\n";
         cout << "2. Mostrar Pruebas.\n";
         cout << "3. Salir\n";
         cout << "Seleccione una opcion: ";
     }

     void lanzar() {
         int opcion;
         do {
             mostrarMenu();
             opcion = obtenerEntradaValida(1, 3);
             switch (opcion) {
                 case 1: crearPrueba(); break;
                 case 2: mostrarPruebas(); break;
                 case 3: cout << "Saliendo... Adios!\n"; break;
             }
         } while (opcion != 3);
     }
 };

 // --- Función principal ---
 int main() {
     Menu menu;
     menu.lanzar();
     return 0;
 }